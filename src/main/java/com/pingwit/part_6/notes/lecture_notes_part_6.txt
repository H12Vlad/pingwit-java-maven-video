Массивы

## Введение в массивы

### Одномерные и двумерные массивы

Массивы в Java представляют собой структуры данных, которые хранят однотипные элементы подряд в памяти. Они обеспечивают эффективный способ хранения и доступа к данным.

#### Одномерные массивы

Одномерный массив представляет собой набор элементов одного типа, расположенных в одной строке.

Пример создания и инициализации одномерного массива:

```

int[] numbers = new int[5]; // создание массива из 5 элементов типа int

numbers[0] = 10;

numbers[1] = 20;

numbers[2] = 30;

numbers[3] = 40;

numbers[4] = 50;

// Обход массива с помощью цикла for

for (int i = 0; i < numbers.length; i++) {

    System.out.println("Элемент " + i + ": " + numbers[i]);

}

```
#### Двумерные массивы

Двумерный массив представляет собой таблицу из элементов, упорядоченных в виде строк и столбцов.

Пример создания и инициализации двумерного массива:

```

int[][] matrix = new int[3][3]; // создание матрицы 3x3

// Инициализация элементов матрицы

matrix[0][0] = 1;

matrix[0][1] = 2;

matrix[0][2] = 3;

matrix[1][0] = 4;

matrix[1][1] = 5;

matrix[1][2] = 6;

matrix[2][0] = 7;

matrix[2][1] = 8;

matrix[2][2] = 9;



// Обход матрицы с помощью вложенных циклов

for (int row = 0; row < matrix.length; row++) {

    for (int col = 0; col < matrix[row].length; col++) {

        System.out.print(matrix[row][col] + " ");

    }

    System.out.println(); // переход на новую строку после каждой строки матрицы

}

```

### Метод `forEach`

Метод `forEach` позволяет выполнить определенное действие для каждого элемента массива или коллекции.

Пример использования `forEach` для одномерного массива:

```

int[] numbers = {1, 2, 3, 4, 5};

// Использование forEach для вывода элементов массива

Arrays.stream(numbers).forEach(num -> System.out.print(num + " "));

```

Пример использования `forEach` для двумерного массива:

```

int[][] matrix = {

    {1, 2, 3},

    {4, 5, 6},

    {7, 8, 9}

};

// Использование forEach для вывода элементов матрицы

Arrays.stream(matrix)

      .flatMapToInt(Arrays::stream)

      .forEach(num -> System.out.print(num + " "));
```

## Сложность алгоритмов

### Сортировка пузырьком

Сортировка пузырьком — это простой алгоритм сортировки, который последовательно сравнивает соседние элементы и меняет их местами, если они находятся в неправильном порядке.

Пример сортировки пузырьком для массива чисел:

```

public class BubbleSort {

    public static void main(String[] args) {

        int[] numbers = {5, 2, 9, 1, 5, 6};

        // Сортировка пузырьком

        for (int i = 0; i < numbers.length - 1; i++) {

            for (int j = 0; j < numbers.length - 1 - i; j++) {

                if (numbers[j] > numbers[j + 1]) {

                    // Обмен элементов

                    int temp = numbers[j];

                    numbers[j] = numbers[j + 1];

                    numbers[j + 1] = temp;
                }
            }
        }

        // Вывод отсортированного массива
        System.out.println("Отсортированный массив:");
        for (int num : numbers) {

            System.out.print(num + " ");
        }
    }
}

```

### Бинарный поиск

Бинарный поиск — это эффективный алгоритм поиска элемента в отсортированном массиве.
Он работает путем деления массива пополам и сравнения искомого элемента с элементом в середине массива.

Пример бинарного поиска в отсортированном массиве:

```

public class BinarySearch {
    public static void main(String[] args) {
        int[] numbers = {1, 3, 5, 7, 9, 11, 13, 15};
        int target = 7;
        int low = 0;
        int high = numbers.length - 1;
        int mid;

        while (low <= high) {
            mid = (low + high) / 2;
            if (numbers[mid] == target) {
                System.out.println("Элемент " + target + " найден по индексу " + mid);
                return;
            } else if (numbers[mid] < target) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        System.out.println("Элемент " + target + " не найден в массиве.");
    }
}

```

Эти примеры демонстрируют основные аспекты работы с массивами в Java,
 а также применение простых алгоритмов сортировки и поиска.
  Массивы — это мощный инструмент для работы с данными,
   который широко используется при разработке программных приложений.