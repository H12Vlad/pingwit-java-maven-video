Классы

## Создание класса

### Инициализация полей



Поля класса представляют собой переменные, которые хранят состояние объекта. Они могут быть инициализированы при объявлении или в конструкторе класса.



Пример инициализации полей в классе:

```

public class Person {

    // Поля класса

    private String name;

    private int age;



    // Конструктор класса

    public Person(String name, int age) {

        this.name = name;

        this.age = age;

    }



    // Геттеры и сеттеры для доступа к полям (не показаны для краткости)



    // Метод toString для представления объекта в виде строки

    @Override

    public String toString() {

        return "Person{" +

               "name='" + name + '\'' +

               ", age=" + age +

               '}';

    }

}

```



### Статические поля



Статические поля принадлежат классу в целом, а не конкретному экземпляру класса. Они инициализируются только один раз при загрузке класса.



Пример статического поля в классе:

```

public class Counter {

    private static int count = 0; // статическое поле



    public Counter() {

        count++; // увеличиваем счетчик при создании каждого экземпляра

    }



    public static int getCount() {

        return count;

    }

}

```



### Блоки инициализации



Блоки инициализации используются для инициализации полей класса. Они могут быть статическими (инициализация статических полей) или нестатическими (инициализация нестатических полей).



Пример блока инициализации в классе:

```

public class Example {

    private int x;

    private static int y;



    // Блок инициализации для инициализации нестатического поля

    {

        x = 5;

    }



    // Статический блок инициализации для инициализации статического поля

    static {

        y = 10;

    }

}

```



### Метод `toString`



Метод `toString` переопределяется в классе для возврата строкового представления объекта. Это полезно для вывода информации об объекте или для отладки.



Пример метода `toString` в классе `Person` (см. выше).



```

@Override

public String toString() {

    return "Person{" +

           "name='" + name + '\'' +

           ", age=" + age +

           '}';

}

```



Метод `toString` позволяет получить информацию о состоянии объекта в удобочитаемом формате, что упрощает отладку и понимание его текущего состояния.



Эти основные концепции помогают создавать структурированные и удобные для использования классы в Java, делая код более читаемым, понятным и поддерживаемым.



