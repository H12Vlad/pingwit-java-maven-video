Примитивные типы данных

Примитивные типы данных в Java представляют собой базовые типы,
 которые не являются объектами и хранятся непосредственно в памяти. Вот основные примитивные типы данных:

- **int**: целочисленный тип данных, хранит целые числа.
- **double**: числовой тип данных с плавающей запятой двойной точности, хранит числа с десятичной точкой.
- **char**: символьный тип данных, хранит одиночный символ Unicode.
- **boolean**: логический тип данных, может принимать значения `true` или `false`.

Примеры объявления переменных примитивных типов данных:
```
int age = 30;
double price = 19.99;
char grade = 'A';
boolean isFound = true;
```

Приведение типов

#### Автоматическое приведение типов (Widening)

Автоматическое приведение типов происходит, когда значение одного типа данных преобразуется в другой тип данных,
 который имеет больший размер и не вызывает потери данных. Например, преобразование `int` в `double`:

```
int numInt = 100;
double numDouble = numInt; // Автоматическое приведение int к double
```

#### Явное приведение типов (Narrowing)

Явное приведение типов происходит,
когда вы явно указываете компилятору преобразовать значение одного типа данных в другой тип данных,
 который имеет меньший размер или может вызвать потерю данных. Например, преобразование `double` в `int`:

```
double numDouble = 10.99;
int numInt = (int) numDouble; // Явное приведение double к int
```

Операторы

#### Основные арифметические операторы

- **Сложение (`+`)**: Складывает два операнда.
- **Вычитание (`-`)**: Вычитает один операнд из другого.
- **Умножение (`*`)**: Умножает два операнда.
- **Деление (`/`)**: Делит один операнд на другой.
- **Остаток от деления (`%`)**: Возвращает остаток от деления двух операндов.

#### Операторы сравнения

- **Равно (`==`)**: Проверяет, равны ли два операнда.
- **Не равно (`!=`)**: Проверяет, не равны ли два операнда.
- **Больше (`>`)** и **Меньше (`<`)**: Сравнивают два операнда на больше или меньше соответственно.
- **Больше или равно (`>=`)** и **Меньше или равно (`<=`)**: Проверяют, больше или равен ли первый операнд второму,
 или меньше или равен ему соответственно.

#### Побитовые операторы

- **Побитовый сдвиг влево (`<<`)**: Сдвигает биты числа влево на определенное количество позиций.
- **Побитовый сдвиг вправо (`>>`)**: Сдвигает биты числа вправо на определенное количество позиций.

#### Приоритет операторов

Операторы имеют различный приоритет выполнения. Например, умножение (`*`) и деление (`/`) имеют более высокий приоритет,
 чем сложение (`+`) и вычитание (`-`). Сокращенные операторы, такие как `+=`, `-=` и другие,
 позволяют комбинировать операцию с присваиванием.

#### Инкремент и декремент

- **Инкремент (`++`)**: Увеличивает значение операнда на 1.
- **Декремент (`--`)**: Уменьшает значение операнда на 1.

Пример использования операторов инкремента и декремента:
```
int x = 5;
x++; // x становится равным 6
x--; // x становится равным 5
```

### Заключение

Понимание примитивных типов данных, приведения типов и основных операторов является фундаментом для разработки на Java.
 Они позволяют эффективно работать с данными, выполнять математические операции и сравнения,
  что необходимо для разработки большинства программных приложений.