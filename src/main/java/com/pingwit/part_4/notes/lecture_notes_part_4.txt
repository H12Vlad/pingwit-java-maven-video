Циклы (for, while, do-while)

Цикл for используется для выполнения повторяющихся операций определенное количество раз.

Синтаксис:

for (инициализация; условие; итерация) {
    // код, который будет выполняться в цикле
}


Пример:

for (int i = 1; i <= 5; i++) {
    System.out.println("Итерация номер " + i);
}


Цикл while выполняет операции, пока заданное условие истинно.

Синтаксис:

while (условие) {
    // код, который будет выполняться в цикле, пока условие истинно
}


Пример:

int count = 1;
while (count <= 5) {
    System.out.println("Итерация номер " + count);
    count++;
}

Цикл do-while аналогичен while, но он всегда выполняет тело цикла хотя бы один раз,
даже если условие с самого начала ложно.

Синтаксис:

do {
    // код, который будет выполняться в цикле
} while (условие);


Пример:

int num = 1;
do {
    System.out.println("Номер: " + num);
    num++;
} while (num <= 5);


Операторы управления циклом :

Оператор continue используется для пропуска текущей итерации цикла и перехода к следующей итерации.

Пример:

for (int i = 1; i <= 5; i++) {
    if (i == 3) {
        continue; // пропустить итерацию, если i равно 3
    }
    System.out.println("Итерация номер " + i);
}

Оператор break используется для прерывания выполнения цикла.

Пример:

for (int i = 1; i <= 5; i++) {
    if (i == 4) {
        break; // выйти из цикла, если i равно 4
    }
    System.out.println("Итерация номер " + i);
}

Оператор return используется для завершения выполнения метода и возврата результата вызывающему коду.

Пример (в контексте метода):

public int findNumber(int[] numbers, int target) {
    for (int i = 0; i < numbers.length; i++) {
        if (numbers[i] == target) {
            return i; // вернуть индекс числа, если оно найдено
        }
    }
    return -1; // вернуть -1, если число не найдено
}


Эти операторы управления циклом позволяют гибко управлять выполнением циклов
в зависимости от условий и требований задачи, делая код более читаемым и эффективным.