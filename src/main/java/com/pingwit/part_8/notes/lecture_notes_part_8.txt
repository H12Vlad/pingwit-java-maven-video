### Часть 8. Методы класса, статические / нестатические

## Модификаторы доступа

Модификаторы доступа в Java определяют уровень доступа к классам, полям, методам и конструкторам. Они обеспечивают контроль за тем, кто и как может использовать элементы класса.
### Геттеры и сеттеры


Геттеры и сеттеры (getters и setters) — это методы класса, которые обеспечивают доступ к полям объекта (чтение и запись значений).

Пример класса с геттерами и сеттерами:

```
public class Person {
    private String name;
    private int age;

    // Конструктор класса
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }
    // Геттеры
    public String getName() {
        return name;
    }

    public int getAge() {
        return age;
    }

    // Сеттеры
    public void setName(String name) {
        this.name = name;
    }

    public void setAge(int age) {
        this.age = age;
    }
    // toString метод для представления объекта в виде строки (уже рассмотрен выше)
    @Override
    public String toString() {
        return "Person{" +
               "name='" + name + '\'' +
               ", age=" + age +
               '}';
    }
}

```

### Статические и нестатические методы

#### Нестатические методы

Нестатические методы в Java связаны с конкретным экземпляром класса.
Они могут обращаться к нестатическим полям и вызывать другие нестатические методы объекта.

Пример нестатического метода в классе `Person`:

```

public class Person {

    private String name;

    private int age;

    // Конструктор и другие методы опущены для краткости

    // Нестатический метод
    public void celebrateBirthday() {
        age++;
        System.out.println(name + " празднует день рождения! Теперь ему " + age + " лет.");
    }
}

```

#### Статические методы

Статические методы в Java принадлежат классу в целом, а не конкретному экземпляру класса.
 Они могут вызываться без создания экземпляра класса и обычно используются для выполнения операций,
  которые не зависят от конкретного состояния объекта.

Пример статического метода в классе `Counter` (пример см. выше):

```

public class Counter {
    private static int count = 0;
    public Counter() {

        count++;

    }
    public static int getCount() {

        return count;
    }
}

```

Статические методы могут использоваться для выполнения общих операций,
которые не требуют создания экземпляра класса. Например, метод `getCount` возвращает
количество созданных экземпляров класса `Counter`.

### Заключение

Использование модификаторов доступа, геттеров и сеттеров,
статических и нестатических методов позволяет организовать эффективное взаимодействие с классами в Java,
обеспечивая контролируемый доступ к данным и функциональность объектов.
Эти концепции являются основой объектно-ориентированного
программирования и способствуют созданию модульного и легко поддерживаемого кода.