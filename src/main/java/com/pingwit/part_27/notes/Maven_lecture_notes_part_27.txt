### Часть 27. Maven - сборщик проектов

#### 1. **Введение в Maven**

Maven — это мощный инструмент для управления проектами, основанный на POM (Project Object Model), который используется для сборки,
управления зависимостями и документирования проектов на Java. Maven помогает автоматизировать процесс сборки проекта,
 управлять библиотеками и плагинами, а также обеспечивает стандартизацию структуры проекта.

---

### **1.1 Установка Maven**

1. **Скачивание и установка:**
   - Перейдите на [официальный сайт Maven](https://maven.apache.org/download.cgi) и скачайте последнюю версию.
   - Разархивируйте скачанный архив в удобную директорию (например, `C:\Maven` на Windows).

2. **Настройка переменных окружения:**
   - Добавьте путь к Maven в переменную окружения `PATH`.
     - На Windows: перейдите в "Свойства системы" → "Дополнительные параметры" → "Переменные среды" и добавьте путь к папке `bin` Maven.
     - На Linux/Mac: отредактируйте файл `.bashrc` или `.zshrc`, добавив строку:
       ```bash
       export PATH=/path/to/maven/bin:$PATH
       ```

3. **Проверка установки:**
   - Откройте терминал или командную строку и введите команду:
     ```bash
     mvn -v
     ```
   - Должна отобразиться информация о версии Maven и установленной JDK.

---

### **1.2 Создание Maven проекта**

Maven позволяет легко создавать проекты с помощью стандартных команд.

1. Откройте терминал или командную строку и выполните команду для создания нового проекта:
   ```bash
   mvn archetype:generate -DgroupId=com.example -DartifactId=my-app -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false
   ```
   - `groupId` — это уникальный идентификатор для проекта (обычно, это доменное имя компании в обратном порядке).
   - `artifactId` — это имя проекта или модуля.
   - `maven-archetype-quickstart` — это артефакт шаблона проекта, который генерирует стандартную структуру Maven-проекта.

2. После выполнения команды Maven создаст структуру папок для проекта:
   ```
   my-app
   ├── pom.xml
   └── src
       ├── main
       │   └── java
       │       └── com
       │           └── example
       │               └── App.java
       └── test
           └── java
               └── com
                   └── example
                       └── AppTest.java
   ```

---

### **1.3 Жизненный цикл Maven**

Maven использует понятие **жизненного цикла** для управления процессом сборки. Жизненный цикл включает несколько фаз:

- **validate** — проверка проекта и всех необходимых данных.
- **compile** — компиляция исходного кода проекта.
- **test** — выполнение тестов с использованием тестового фреймворка (например, JUnit).
- **package** — упаковка скомпилированного кода в формат, подходящий для распространения (например, `.jar` или `.war`).
- **install** — установка пакета в локальный репозиторий Maven для использования в других проектах.
- **deploy** — деплой (публикация) пакета в удалённый репозиторий.

Пример команды для сборки проекта:
```bash
mvn clean install
```
- `clean` — это команда для очистки предыдущих сборок.
- `install` — запускает весь жизненный цикл до фазы установки.

---

### **1.4 Структура проекта и POM файл**

Основным элементом любого Maven-проекта является **POM файл** (`pom.xml`),
 который содержит информацию о проекте и конфигурацию сборки.

Пример минимального `pom.xml` файла:
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
                             http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>my-app</artifactId>
    <version>1.0-SNAPSHOT</version>

    <dependencies>
        <!-- Пример зависимости -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.12</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
```

### **1.5 Управление зависимостями**

Maven автоматически загружает необходимые библиотеки и зависимости из репозиториев (локальных или удалённых).
 Это делается с помощью секции `<dependencies>` в POM файле.

Пример добавления зависимости:
```xml
<dependency>
    <groupId>org.apache.commons</groupId>
    <artifactId>commons-lang3</artifactId>
    <version>3.12.0</version>
</dependency>
```

Maven также поддерживает управление версиями библиотек, транзитивные зависимости и профили для различных окружений.

---

### **1.6 Перенос данных и классов**

При создании Maven-проекта важно правильно организовать структуру проекта:

- **Исходный код Java** находится в папке `src/main/java`.
- **Ресурсы** (например, файлы конфигурации или статические файлы) должны быть помещены в папку `src/main/resources`.
- **Тесты** — в папке `src/test/java`.

Maven автоматически скопирует ресурсы и классы в соответствующие директории при сборке.

Для переноса данных или сборки артефактов в другой каталог можно настроить плагин `maven-resources-plugin`
или использовать пользовательские конфигурации для фаз сборки, такие как `package`.

---

Maven — это мощный инструмент, который упрощает управление проектами, зависимостями и процессом сборки,
обеспечивая стандартизированный подход к разработке на Java.