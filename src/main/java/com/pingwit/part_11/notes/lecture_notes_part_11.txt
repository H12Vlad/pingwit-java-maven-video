Рекурсия


## Примеры рекурсии

Рекурсия в программировании представляет собой технику, при которой функция вызывает саму себя.
 Это мощный инструмент для решения задач, особенно для тех, которые могут быть выражены через повторяющиеся подзадачи.

### Рекурсивный вывод массива

Пример рекурсивной функции для вывода элементов массива:

```
public class RecursiveExamples {
    public static void printArray(int[] arr, int index) {
        if (index < arr.length) {
            System.out.print(arr[index] + " ");
            printArray(arr, index + 1); // Рекурсивный вызов для следующего элемента
        }
    }

    public static void main(String[] args) {
        int[] array = {1, 2, 3, 4, 5};
        printArray(array, 0); // Начинаем с индекса 0
    }
}

```
В этом примере функция `printArray` вызывает саму себя для печати каждого элемента массива, пока не достигнет конца массива.

### Вычисление факториала
Факториал числа \( n \) (обозначается как \( n! \)) определяется как произведение всех целых чисел от 1 до \( n \).
 Рекурсивная формула вычисления факториала:

```

public class RecursiveExamples {
    public static int factorial(int n) {
        if (n == 0 || n == 1) {
            return 1;
        } else {
            return n * factorial(n - 1); // Рекурсивный вызов для вычисления факториала (n-1)!
        }
    }

    public static void main(String[] args) {
        int number = 5;
        int factorialResult = factorial(number);
        System.out.println("Факториал числа " + number + " равен " + factorialResult);
    }
}

```
### Последовательность Фибоначчи

Последовательность Фибоначчи — это последовательность чисел, где каждое следующее число является суммой двух предыдущих.
 Рекурсивная функция для вычисления числа в последовательности Фибоначчи:

```
public class RecursiveExamples {
    public static int fibonacci(int n) {
        if (n <= 1) {
            return n;
        } else {
            return fibonacci(n - 1) + fibonacci(n - 2); // Рекурсивный вызов для вычисления числа в последовательности
        }
    }

    public static void main(String[] args) {
        int number = 6; // Номер числа в последовательности Фибоначчи (нумерация с 0)
        int fibonacciResult = fibonacci(number);
        System.out.println("Число в последовательности Фибоначчи под номером " + number + " равно " + fibonacciResult);
    }
}

```

### Заключение

Рекурсия позволяет элегантно решать множество задач, особенно те,
которые могут быть разделены на повторяющиеся подзадачи.
Однако необходимо следить за глубиной рекурсии, чтобы избежать переполнения стека вызовов (stack overflow).
 При правильном использовании рекурсия способствует написанию более чистого и понятного кода,
  упрощает решение некоторых алгоритмических задач и может повысить производительность при правильной реализации.