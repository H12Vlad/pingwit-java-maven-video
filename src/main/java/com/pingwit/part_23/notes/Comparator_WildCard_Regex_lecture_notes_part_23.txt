Часть 23 включает несколько важных тем, связанных с компараторами, регулярными выражениями, wildcard и интерфейсами для сравнения. Давайте рассмотрим каждую из них подробно:

### 1. **Сравнение: `Comparator` и `Comparable`**

В Java для сравнения объектов между собой используются два интерфейса: `Comparable` и `Comparator`.

- **`Comparable`**:
  - Этот интерфейс используется для определения естественного порядка объектов.
  - Он имеет метод `compareTo()`, который необходимо реализовать. Этот метод сравнивает текущий объект с указанным объектом и возвращает:
    - Отрицательное число, если текущий объект меньше указанного.
    - Ноль, если объекты равны.
    - Положительное число, если текущий объект больше указанного.

  ```java
  public class Person implements Comparable<Person> {
      private String name;
      private int age;

      public Person(String name, int age) {
          this.name = name;
          this.age = age;
      }

      @Override
      public int compareTo(Person other) {
          return Integer.compare(this.age, other.age);
      }
  }
  ```

- **`Comparator`**:
  - Этот интерфейс используется для создания внешних стратегий сравнения, т.е. когда нам нужно сравнивать объекты разными способами.
  - Интерфейс содержит метод `compare()`, который принимает два объекта для сравнения и возвращает:
    - Отрицательное число, если первый объект меньше второго.
    - Ноль, если объекты равны.
    - Положительное число, если первый объект больше второго.
  - Можно использовать статические методы `Comparator`, такие как `reverseOrder()`, `comparing()`, для создания компараторов.

  ```java
  public class AgeComparator implements Comparator<Person> {
      @Override
      public int compare(Person p1, Person p2) {
          return Integer.compare(p1.getAge(), p2.getAge());
      }
  }
  ```

### 2. **Wildcards (джокеры) в Generics**

Wildcards (джокеры) используются в дженериках для обеспечения гибкости при работе с параметризованными типами. В Java есть три типа wildcard:

- **`?` (неограниченный wildcard)**:
  - Означает, что можно использовать любой тип.
  - Пример: `List<?>` может быть списком объектов любого типа.

  ```java
  public void printList(List<?> list) {
      for (Object obj : list) {
          System.out.println(obj);
      }
  }
  ```

- **`? extends T` (ограниченный сверху wildcard)**:
  - Означает, что можно использовать любой тип, который является подклассом или самим типом `T`.
  - Пример: `List<? extends Number>` может быть списком типа `Number` или его подклассов (например, `Integer`, `Double`).

  ```java
  public void printNumbers(List<? extends Number> list) {
      for (Number number : list) {
          System.out.println(number);
      }
  }
  ```

- **`? super T` (ограниченный снизу wildcard)**:
  - Означает, что можно использовать любой тип, который является суперклассом `T`.
  - Пример: `List<? super Integer>` может быть списком типа `Integer` или любого из его суперклассов (например, `Number`, `Object`).

  ```java
  public void addInteger(List<? super Integer> list) {
      list.add(123);
  }
  ```

### 3. **Регулярные выражения (Regex)**

Регулярные выражения (Regex) — это шаблоны, используемые для поиска,
 проверки и замены текста. В Java работа с регулярными выражениями осуществляется с использованием классов `Pattern` и `Matcher`.

- **Создание шаблона**:

  ```java
  String regex = "\\d+"; // Шаблон для поиска одной или более цифр
  Pattern pattern = Pattern.compile(regex);
  ```

- **Создание и использование Matcher**:

  ```java
  Matcher matcher = pattern.matcher("12345");
  boolean matches = matcher.matches(); // true, если строка соответствует шаблону

  while (matcher.find()) {
      System.out.println("Найдено: " + matcher.group());
  }
  ```

- **Примеры регулярных выражений**:
  - `\d` — соответствует любой цифре.
  - `\w` — соответствует любой букве, цифре или символу подчеркивания.
  - `.` — соответствует любому символу.
  - `^` — указывает на начало строки.
  - `$` — указывает на конец строки.
  - `[abc]` — соответствует любому из символов `a`, `b`, `c`.
  - `(a|b)` — соответствует `a` или `b`.

  ```java
  String text = "abc123";
  String regex = "^[a-z]+\\d+$"; // Строка, начинающаяся с букв и заканчивающаяся цифрами

  if (text.matches(regex)) {
      System.out.println("Строка соответствует шаблону");
  } else {
      System.out.println("Строка не соответствует шаблону");
  }
  ```

Эти темы широко используются в Java для обработки коллекций,
работы с дженериками и обработки текстов с помощью регулярных выражений.