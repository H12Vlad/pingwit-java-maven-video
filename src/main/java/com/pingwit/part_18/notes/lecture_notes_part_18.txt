### Ввод/вывод потоков (IO)

## Иерархия потоков ввода/вывода

В Java работа с потоками ввода/вывода осуществляется с помощью различных классов из пакета `java.io`. Эти классы делятся на две основные категории: байтовые и символьные потоки.

### Байтовые потоки

Байтовые потоки используются для работы с бинарными данными, такими как изображения, аудиофайлы и другие бинарные форматы. Основные классы:

- **`InputStream`**: Абстрактный класс для всех байтовых потоков ввода.
- **`OutputStream`**: Абстрактный класс для всех байтовых потоков вывода.

#### Основные классы байтовых потоков

- **`FileInputStream`**: Используется для чтения байтов из файла.
- **`FileOutputStream`**: Используется для записи байтов в файл.
- **`ByteArrayInputStream`**: Чтение байтов из массива байтов.
- **`ByteArrayOutputStream`**: Запись байтов в массив байтов.
- **`BufferedInputStream`**: Буферизованный поток для улучшения производительности чтения.
- **`BufferedOutputStream`**: Буферизованный поток для улучшения производительности записи.

### Символьные потоки

Символьные потоки используются для работы с текстовыми данными. Основные классы:

- **`Reader`**: Абстрактный класс для всех символьных потоков ввода.
- **`Writer`**: Абстрактный класс для всех символьных потоков вывода.

## FileInputStream и FileOutputStream

### FileInputStream

`FileInputStream` используется для чтения данных из файла.

#### Пример использования FileInputStream

```
import java.io.FileInputStream;
import java.io.IOException;

public class FileInputStreamExample {
    public static void main(String[] args) {
        try (FileInputStream fis = new FileInputStream("example.txt")) {
            int data;
            while ((data = fis.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### FileOutputStream

`FileOutputStream` используется для записи данных в файл.

#### Пример использования FileOutputStream

```
import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamExample {
    public static void main(String[] args) {
        String data = "Hello, World!";
        try (FileOutputStream fos = new FileOutputStream("example.txt")) {
            fos.write(data.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

## ByteArrayInputStream и ByteArrayOutputStream

### ByteArrayInputStream

`ByteArrayInputStream` используется для чтения данных из массива байтов.

#### Пример использования ByteArrayInputStream

```
import java.io.ByteArrayInputStream;
import java.io.IOException;

public class ByteArrayInputStreamExample {
    public static void main(String[] args) {
        byte[] data = "Hello, World!".getBytes();
        try (ByteArrayInputStream bais = new ByteArrayInputStream(data)) {
            int byteData;
            while ((byteData = bais.read()) != -1) {
                System.out.print((char) byteData);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### ByteArrayOutputStream

`ByteArrayOutputStream` используется для записи данных в массив байтов.

#### Пример использования ByteArrayOutputStream

```
import java.io.ByteArrayOutputStream;
import java.io.IOException;

public class ByteArrayOutputStreamExample {
    public static void main(String[] args) {
        String data = "Hello, World!";
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {
            baos.write(data.getBytes());
            byte[] byteArray = baos.toByteArray();
            System.out.println(new String(byteArray));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

## BufferedInputStream и BufferedOutputStream

### BufferedInputStream

`BufferedInputStream` используется для буферизованного чтения данных, что улучшает производительность.

#### Пример использования BufferedInputStream

```
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.io.IOException;

public class BufferedInputStreamExample {
    public static void main(String[] args) {
        try (BufferedInputStream bis = new BufferedInputStream(new FileInputStream("example.txt"))) {
            int data;
            while ((data = bis.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### BufferedOutputStream

`BufferedOutputStream` используется для буферизованной записи данных, что улучшает производительность.

#### Пример использования BufferedOutputStream

```
import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class BufferedOutputStreamExample {
    public static void main(String[] args) {
        String data = "Hello, World!";
        try (BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream("example.txt"))) {
            bos.write(data.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

## Работа с файлами

### Чтение данных из файла

```
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class FileReadExample {
    public static void main(String[] args) {
        // Чтение файла с использованием FileInputStream
        try (FileInputStream fis = new FileInputStream("example.txt")) {
            int data;
            while ((data = fis.read()) != -1) {
                System.out.print((char) data);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Чтение файла с использованием NIO
        try {
            String content = Files.readString(Paths.get("example.txt"));
            System.out.println(content);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Запись данных в файл

```
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;

public class FileWriteExample {
    public static void main(String[] args) {
        String data = "Hello, World!";

        // Запись данных с использованием FileOutputStream
        try (FileOutputStream fos = new FileOutputStream("example.txt")) {
            fos.write(data.getBytes());
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Запись данных с использованием NIO
        try {
            Files.writeString(Paths.get("example.txt"), data);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
```

### Заключение

Работа с потоками ввода/вывода в Java предоставляет гибкие и мощные инструменты для обработки данных.
 Байтовые потоки, такие как `FileInputStream`, `FileOutputStream`, `ByteArrayInputStream` и `ByteArrayOutputStream`,
 позволяют работать с бинарными данными. Буферизованные потоки, такие как `BufferedInputStream` и `BufferedOutputStream`,
 повышают производительность. Дополнительно, использование новых возможностей из пакета `java.nio.file` упрощает работу с файлами.