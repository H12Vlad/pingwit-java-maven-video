Интерфейсы, абстрактные классы

## Интерфейсы и абстрактные классы

### Интерфейсы

Интерфейс в Java представляет собой абстрактный тип данных,
 который определяет набор методов (сигнатур методов) без их реализации.
 Интерфейсы могут содержать только константные переменные и абстрактные методы,
  а также методы по умолчанию (default methods) и статические методы (static methods) начиная с Java 8.

Пример интерфейса `Shape`:

```java

public interface Shape {

    double calculateArea(); // Абстрактный метод для вычисления площади фигуры
    double calculatePerimeter(); // Еще один абстрактный метод для вычисления периметра фигуры

}

```

Интерфейсы позволяют реализовывать множественное наследование, так как класс может реализовывать несколько интерфейсов.

### Абстрактные классы

Абстрактный класс в Java — это класс, который не может быть инстанциирован (т.е., создан объект этого класса),
и который может содержать абстрактные методы (методы без реализации) и реализованные методы.

Пример абстрактного класса `Animal`:

```

public abstract class Animal {
    private String name;
    public Animal(String name) {
        this.name = name;
    }



    // Абстрактный метод, который должны реализовать подклассы

    public abstract void makeSound();

    // Реализованный метод

    public void eat() {
        System.out.println(name + " is eating");
    }
}

```
Абстрактные классы могут содержать как абстрактные методы, так и реализованные методы, что позволяет предоставить базовую реализацию функциональности для подклассов.

### `final` и абстрактные методы в `enum`

#### `final` в Java

Ключевое слово `final` в Java может использоваться для переменных, методов и классов:

- Для переменных `final` обозначает, что значение переменной не может быть изменено после инициализации.

- Для методов `final` обозначает, что метод не может быть переопределен в подклассах.

- Для классов `final` обозначает, что класс не может быть расширен (не может иметь подклассов).

Пример использования `final` для переменной:

```

public class Example {
    private final int MAX_COUNT = 100;
    // Ко класса

}

```

#### Абстрактные методы в `enum`

Перечисления (enum) в Java могут содержать абстрактные методы, которые требуют реализации каждой константы перечисления.

Пример использования абстрактного метода в перечислении:

```

public enum Day {
    MONDAY {
        @Override
        public String getRussianName() {
            return "Понедельник";
        }
    },
    // Другие дни недели
    // Абстрактный метод, который должны реализовать все константы перечисления
    public abstract String getRussianName();

}

```
В этом примере каждая константа перечисления `Day` должна предоставить свою реализацию метода `getRussianName()`,
что позволяет получить русское название дня недели.

### Заключение

Интерфейсы и абстрактные классы являются важными концепциями в объектно-ориентированном программировании на Java.
 Они позволяют абстрагировать поведение и обеспечивают гибкость при разработке приложений.
  Комбинация абстрактных классов и интерфейсов позволяет легко создавать и поддерживать модульный и расширяемый код.